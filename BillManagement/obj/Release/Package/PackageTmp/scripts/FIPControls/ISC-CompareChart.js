/// <reference path="../Internalplugin/jquery-1.8.3.min.js" />

function Get_CompareChartAll(ChartID) {

    var Data_CompareChart = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 1 }, { "x": 2, "y": 3 }, { "x": 3, "y": 4 }, { "x": 4, "y": 6 }, { "x": 5, "y": 8 }], "key": "Sine Wave", "color": "#ff7f0e" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 1 }, { "x": 2, "y": 2 }, { "x": 3, "y": 3 }, { "x": 4, "y": 5 }, { "x": 5, "y": 6 }], "key": "Cosine Wave", "color": "#2ca02c" }];

    var Data_CompareChart1 = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 0.09983341664682815 }, { "x": 2, "y": 0.19866933079506122 }, { "x": 3, "y": 0.29552020666133955 }, { "x": 4, "y": 0.3894183423086505 }, { "x": 5, "y": 0.479425538604203 }, { "x": 6, "y": 0.5646424733950354 }, { "x": 7, "y": 0.644217687237691 }, { "x": 8, "y": 0.7173560908995228 }, { "x": 9, "y": 0.7833269096274834 }, { "x": 10, "y": 0.8414709848078965 }, { "x": 11, "y": 0.8912073600614354 }, { "x": 12, "y": 0.9320390859672263 }, { "x": 13, "y": 0.963558185417193 }, { "x": 14, "y": 0.9854497299884601 }, { "x": 15, "y": 0.9974949866040544 }, { "x": 16, "y": 0.9995736030415051 }, { "x": 17, "y": 0.9916648104524686 }, { "x": 18, "y": 0.9738476308781951 }, { "x": 19, "y": 0.9463000876874145 }, { "x": 20, "y": 0.9092974268256817 }, { "x": 21, "y": 0.8632093666488737 }, { "x": 22, "y": 0.8084964038195901 }, { "x": 23, "y": 0.7457052121767203 }, { "x": 24, "y": 0.675463180551151 }, { "x": 25, "y": 0.5984721441039565 }, { "x": 26, "y": 0.5155013718214642 }, { "x": 27, "y": 0.4273798802338298 }, { "x": 28, "y": 0.3349881501559051 }, { "x": 29, "y": 0.23924932921398243 }, { "x": 30, "y": 0.1411200080598672 }, { "x": 31, "y": 0.04158066243329049 }, { "x": 32, "y": -0.058374143427580086 }, { "x": 33, "y": -0.1577456941432482 }, { "x": 34, "y": -0.2555411020268312 }, { "x": 35, "y": -0.35078322768961984 }, { "x": 36, "y": -0.44252044329485246 }, { "x": 37, "y": -0.5298361409084934 }, { "x": 38, "y": -0.6118578909427189 }, { "x": 39, "y": -0.6877661591839738 }, { "x": 40, "y": -0.7568024953079282 }, { "x": 41, "y": -0.8182771110644103 }, { "x": 42, "y": -0.8715757724135882 }, { "x": 43, "y": -0.9161659367494549 }, { "x": 44, "y": -0.951602073889516 }, { "x": 45, "y": -0.977530117665097 }, { "x": 46, "y": -0.9936910036334644 }, { "x": 47, "y": -0.9999232575641008 }, { "x": 48, "y": -0.9961646088358407 }, { "x": 49, "y": -0.9824526126243325 }, { "x": 50, "y": -0.9589242746631385 }, { "x": 51, "y": -0.9258146823277325 }, { "x": 52, "y": -0.8834546557201531 }, { "x": 53, "y": -0.8322674422239013 }, { "x": 54, "y": -0.7727644875559871 }, { "x": 55, "y": -0.7055403255703919 }, { "x": 56, "y": -0.6312666378723216 }, { "x": 57, "y": -0.5506855425976376 }, { "x": 58, "y": -0.46460217941375737 }, { "x": 59, "y": -0.373876664830236 }, { "x": 60, "y": -0.27941549819892586 }, { "x": 61, "y": -0.18216250427209588 }, { "x": 62, "y": -0.0830894028174964 }, { "x": 63, "y": 0.016813900484349713 }, { "x": 64, "y": 0.11654920485049364 }, { "x": 65, "y": 0.21511998808781552 }, { "x": 66, "y": 0.31154136351337786 }, { "x": 67, "y": 0.4048499206165983 }, { "x": 68, "y": 0.49411335113860816 }, { "x": 69, "y": 0.5784397643882001 }, { "x": 70, "y": 0.6569865987187891 }, { "x": 71, "y": 0.7289690401258759 }, { "x": 72, "y": 0.7936678638491531 }, { "x": 73, "y": 0.8504366206285644 }, { "x": 74, "y": 0.8987080958116269 }, { "x": 75, "y": 0.9379999767747389 }, { "x": 76, "y": 0.9679196720314863 }, { "x": 77, "y": 0.9881682338770004 }, { "x": 78, "y": 0.998543345374605 }, { "x": 79, "y": 0.998941341839772 }, { "x": 80, "y": 0.9893582466233818 }, { "x": 81, "y": 0.9698898108450863 }, { "x": 82, "y": 0.9407305566797731 }, { "x": 83, "y": 0.9021718337562933 }, { "x": 84, "y": 0.8545989080882804 }, { "x": 85, "y": 0.7984871126234903 }, { "x": 86, "y": 0.7343970978741133 }, { "x": 87, "y": 0.6629692300821833 }, { "x": 88, "y": 0.5849171928917617 }, { "x": 89, "y": 0.5010208564578846 }, { "x": 90, "y": 0.4121184852417566 }, { "x": 91, "y": 0.3190983623493521 }, { "x": 92, "y": 0.22288991410024764 }, { "x": 93, "y": 0.1244544235070617 }, { "x": 94, "y": 0.024775425453357765 }, { "x": 95, "y": -0.0751511204618093 }, { "x": 96, "y": -0.17432678122297965 }, { "x": 97, "y": -0.27176062641094245 }, { "x": 98, "y": -0.3664791292519284 }, { "x": 99, "y": -0.45753589377532133 }], "key": "Sine Wave", "color": "#ff7f0e" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 0.4975020826390129 }, { "x": 2, "y": 0.4900332889206208 }, { "x": 3, "y": 0.477668244562803 }, { "x": 4, "y": 0.46053049700144255 }, { "x": 5, "y": 0.4387912809451864 }, { "x": 6, "y": 0.41266780745483916 }, { "x": 7, "y": 0.38242109364224425 }, { "x": 8, "y": 0.3483533546735827 }, { "x": 9, "y": 0.3108049841353322 }, { "x": 10, "y": 0.2701511529340699 }, { "x": 11, "y": 0.22679806071278866 }, { "x": 12, "y": 0.1811788772383368 }, { "x": 13, "y": 0.13374941431229367 }, { "x": 14, "y": 0.08498357145012052 }, { "x": 15, "y": 0.03536860083385145 }, { "x": 16, "y": -0.014599761150644408 }, { "x": 17, "y": -0.06442224714776232 }, { "x": 18, "y": -0.11360104734654355 }, { "x": 19, "y": -0.16164478343175168 }, { "x": 20, "y": -0.2080734182735712 }, { "x": 21, "y": -0.2524230522999288 }, { "x": 22, "y": -0.2942505586276729 }, { "x": 23, "y": -0.33313801063991205 }, { "x": 24, "y": -0.3686968577706227 }, { "x": 25, "y": -0.40057180777346685 }, { "x": 26, "y": -0.42844437668447366 }, { "x": 27, "y": -0.4520360710085306 }, { "x": 28, "y": -0.47111117033432903 }, { "x": 29, "y": -0.4854790825747953 }, { "x": 30, "y": -0.4949962483002227 }, { "x": 31, "y": -0.49956757513663974 }, { "x": 32, "y": -0.49914738789737656 }, { "x": 33, "y": -0.49373988495443244 }, { "x": 34, "y": -0.48339909628973055 }, { "x": 35, "y": -0.46822834364539817 }, { "x": 36, "y": -0.4483792081670735 }, { "x": 37, "y": -0.424050015855204 }, { "x": 38, "y": -0.3954838559572084 }, { "x": 39, "y": -0.3629661521000701 }, { "x": 40, "y": -0.32682181043180597 }, { "x": 41, "y": -0.2874119732666346 }, { "x": 42, "y": -0.2451304106703497 }, { "x": 43, "y": -0.20039958603998773 }, { "x": 44, "y": -0.15366643498920968 }, { "x": 45, "y": -0.10539789971538985 }, { "x": 46, "y": -0.056076263467527435 }, { "x": 47, "y": -0.00619433173144528 }, { "x": 48, "y": 0.0437494917197232 }, { "x": 49, "y": 0.09325618471128788 }, { "x": 50, "y": 0.14183109273161312 }, { "x": 51, "y": 0.18898887135649012 }, { "x": 52, "y": 0.23425833565018855 }, { "x": 53, "y": 0.2771871680895804 }, { "x": 54, "y": 0.31734643797131734 }, { "x": 55, "y": 0.35433488714563 }, { "x": 56, "y": 0.3877829392551248 }, { "x": 57, "y": 0.4173563924195799 }, { "x": 58, "y": 0.44275975847065946 }, { "x": 59, "y": 0.46373921537201795 }, { "x": 60, "y": 0.480085143325183 }, { "x": 61, "y": 0.49163421922129225 }, { "x": 62, "y": 0.49827104851160875 }, { "x": 63, "y": 0.49992931819170755 }, { "x": 64, "y": 0.4965924593790963 }, { "x": 65, "y": 0.48829381286401174 }, { "x": 66, "y": 0.4751162959792648 }, { "x": 67, "y": 0.4571915741176597 }, { "x": 68, "y": 0.43469874517491264 }, { "x": 69, "y": 0.4078625500626784 }, { "x": 70, "y": 0.3769511271716523 }, { "x": 71, "y": 0.3422733332214033 }, { "x": 72, "y": 0.3041756572661273 }, { "x": 73, "y": 0.26303875869055265 }, { "x": 74, "y": 0.21927366378719518 }, { "x": 75, "y": 0.1733176589175129 }, { "x": 76, "y": 0.12562992129112785 }, { "x": 77, "y": 0.07668693101893218 }, { "x": 78, "y": 0.026977710281324875 }, { "x": 79, "y": -0.023001062819768475 }, { "x": 80, "y": -0.07275001690430677 }, { "x": 81, "y": -0.12177207686789555 }, { "x": 82, "y": -0.16957743049191726 }, { "x": 83, "y": -0.2156884224853104 }, { "x": 84, "y": -0.2596443270583428 }, { "x": 85, "y": -0.3010059513424118 }, { "x": 86, "y": -0.3393600236600062 }, { "x": 87, "y": -0.37432332279869934 }, { "x": 88, "y": -0.405546507030828 }, { "x": 89, "y": -0.43271760462055614 }, { "x": 90, "y": -0.45556513094233847 }, { "x": 91, "y": -0.47386080106555595 }, { "x": 92, "y": -0.4874218107020818 }, { "x": 93, "y": -0.4961126627263017 }, { "x": 94, "y": -0.49984652101760324 }, { "x": 95, "y": -0.4985860780981892 }, { "x": 96, "y": -0.4923439278970635 }, { "x": 97, "y": -0.4811824399156551 }, { "x": 98, "y": -0.46521313605237663 }, { "x": 99, "y": -0.44459557631268043 }], "key": "Cosine Wave", "color": "#2ca02c" }];
    nv.addGraph(function () {
        var chart = nv.models.lineChart();
        var fitScreen = false;
        var width = 600;
        var height = 200;
        var zoom = 1;

        chart.useInteractiveGuideline(true);
        chart.xAxis
      .tickFormat(d3.format(',r'));

        chart.yAxis
      .axisLabel('')
      .tickFormat(d3.format(',.2f'));
        chart.showLegend(false);
        d3.select('#' + ChartID + ' ')
      .attr('perserveAspectRatio', 'xMinYMid')
      .attr('width', width)
      .attr('height', height)
      .datum(Data_CompareChart)
       .transition().duration(500)
        .call(chart);
        return chart;
    });



    function sinAndCos() {
        var sin = [],
      cos = [];

        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        return [
    {
        values: sin,
        key: "Sine Wave",
        color: "#ff7f0e"
    },
    {
        values: cos,
        key: "Cosine Wave",
        color: "#2ca02c"
    }
        ];
    }


}

//1
function Get_CompareChart1(ChartID) {

    var Data_CompareChart1 = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 1 }, { "x": 2, "y": 3 }, { "x": 3, "y": 4 }, { "x": 4, "y": 6 }, { "x": 5, "y": 8 }], "key": "Sine Wave", "color": "#ff7f0e" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 1 }, { "x": 2, "y": 2 }, { "x": 3, "y": 3 }, { "x": 4, "y": 5 }, { "x": 5, "y": 6 }], "key": "Cosine Wave", "color": "#2ca02c" }];

    var Data_CompareChart2 = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 0.09983341664682815 }, { "x": 2, "y": 0.19866933079506122 }, { "x": 3, "y": 0.29552020666133955 }, { "x": 4, "y": 0.3894183423086505 }, { "x": 5, "y": 0.479425538604203 }, { "x": 6, "y": 0.5646424733950354 }, { "x": 7, "y": 0.644217687237691 }, { "x": 8, "y": 0.7173560908995228 }, { "x": 9, "y": 0.7833269096274834 }, { "x": 10, "y": 0.8414709848078965 }, { "x": 11, "y": 0.8912073600614354 }, { "x": 12, "y": 0.9320390859672263 }, { "x": 13, "y": 0.963558185417193 }, { "x": 14, "y": 0.9854497299884601 }, { "x": 15, "y": 0.9974949866040544 }, { "x": 16, "y": 0.9995736030415051 }, { "x": 17, "y": 0.9916648104524686 }, { "x": 18, "y": 0.9738476308781951 }, { "x": 19, "y": 0.9463000876874145 }, { "x": 20, "y": 0.9092974268256817 }, { "x": 21, "y": 0.8632093666488737 }, { "x": 22, "y": 0.8084964038195901 }, { "x": 23, "y": 0.7457052121767203 }, { "x": 24, "y": 0.675463180551151 }, { "x": 25, "y": 0.5984721441039565 }, { "x": 26, "y": 0.5155013718214642 }, { "x": 27, "y": 0.4273798802338298 }, { "x": 28, "y": 0.3349881501559051 }, { "x": 29, "y": 0.23924932921398243 }, { "x": 30, "y": 0.1411200080598672 }, { "x": 31, "y": 0.04158066243329049 }, { "x": 32, "y": -0.058374143427580086 }, { "x": 33, "y": -0.1577456941432482 }, { "x": 34, "y": -0.2555411020268312 }, { "x": 35, "y": -0.35078322768961984 }, { "x": 36, "y": -0.44252044329485246 }, { "x": 37, "y": -0.5298361409084934 }, { "x": 38, "y": -0.6118578909427189 }, { "x": 39, "y": -0.6877661591839738 }, { "x": 40, "y": -0.7568024953079282 }, { "x": 41, "y": -0.8182771110644103 }, { "x": 42, "y": -0.8715757724135882 }, { "x": 43, "y": -0.9161659367494549 }, { "x": 44, "y": -0.951602073889516 }, { "x": 45, "y": -0.977530117665097 }, { "x": 46, "y": -0.9936910036334644 }, { "x": 47, "y": -0.9999232575641008 }, { "x": 48, "y": -0.9961646088358407 }, { "x": 49, "y": -0.9824526126243325 }, { "x": 50, "y": -0.9589242746631385 }, { "x": 51, "y": -0.9258146823277325 }, { "x": 52, "y": -0.8834546557201531 }, { "x": 53, "y": -0.8322674422239013 }, { "x": 54, "y": -0.7727644875559871 }, { "x": 55, "y": -0.7055403255703919 }, { "x": 56, "y": -0.6312666378723216 }, { "x": 57, "y": -0.5506855425976376 }, { "x": 58, "y": -0.46460217941375737 }, { "x": 59, "y": -0.373876664830236 }, { "x": 60, "y": -0.27941549819892586 }, { "x": 61, "y": -0.18216250427209588 }, { "x": 62, "y": -0.0830894028174964 }, { "x": 63, "y": 0.016813900484349713 }, { "x": 64, "y": 0.11654920485049364 }, { "x": 65, "y": 0.21511998808781552 }, { "x": 66, "y": 0.31154136351337786 }, { "x": 67, "y": 0.4048499206165983 }, { "x": 68, "y": 0.49411335113860816 }, { "x": 69, "y": 0.5784397643882001 }, { "x": 70, "y": 0.6569865987187891 }, { "x": 71, "y": 0.7289690401258759 }, { "x": 72, "y": 0.7936678638491531 }, { "x": 73, "y": 0.8504366206285644 }, { "x": 74, "y": 0.8987080958116269 }, { "x": 75, "y": 0.9379999767747389 }, { "x": 76, "y": 0.9679196720314863 }, { "x": 77, "y": 0.9881682338770004 }, { "x": 78, "y": 0.998543345374605 }, { "x": 79, "y": 0.998941341839772 }, { "x": 80, "y": 0.9893582466233818 }, { "x": 81, "y": 0.9698898108450863 }, { "x": 82, "y": 0.9407305566797731 }, { "x": 83, "y": 0.9021718337562933 }, { "x": 84, "y": 0.8545989080882804 }, { "x": 85, "y": 0.7984871126234903 }, { "x": 86, "y": 0.7343970978741133 }, { "x": 87, "y": 0.6629692300821833 }, { "x": 88, "y": 0.5849171928917617 }, { "x": 89, "y": 0.5010208564578846 }, { "x": 90, "y": 0.4121184852417566 }, { "x": 91, "y": 0.3190983623493521 }, { "x": 92, "y": 0.22288991410024764 }, { "x": 93, "y": 0.1244544235070617 }, { "x": 94, "y": 0.024775425453357765 }, { "x": 95, "y": -0.0751511204618093 }, { "x": 96, "y": -0.17432678122297965 }, { "x": 97, "y": -0.27176062641094245 }, { "x": 98, "y": -0.3664791292519284 }, { "x": 99, "y": -0.45753589377532133 }], "key": "Sine Wave", "color": "#ff7f0e" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 0.4975020826390129 }, { "x": 2, "y": 0.4900332889206208 }, { "x": 3, "y": 0.477668244562803 }, { "x": 4, "y": 0.46053049700144255 }, { "x": 5, "y": 0.4387912809451864 }, { "x": 6, "y": 0.41266780745483916 }, { "x": 7, "y": 0.38242109364224425 }, { "x": 8, "y": 0.3483533546735827 }, { "x": 9, "y": 0.3108049841353322 }, { "x": 10, "y": 0.2701511529340699 }, { "x": 11, "y": 0.22679806071278866 }, { "x": 12, "y": 0.1811788772383368 }, { "x": 13, "y": 0.13374941431229367 }, { "x": 14, "y": 0.08498357145012052 }, { "x": 15, "y": 0.03536860083385145 }, { "x": 16, "y": -0.014599761150644408 }, { "x": 17, "y": -0.06442224714776232 }, { "x": 18, "y": -0.11360104734654355 }, { "x": 19, "y": -0.16164478343175168 }, { "x": 20, "y": -0.2080734182735712 }, { "x": 21, "y": -0.2524230522999288 }, { "x": 22, "y": -0.2942505586276729 }, { "x": 23, "y": -0.33313801063991205 }, { "x": 24, "y": -0.3686968577706227 }, { "x": 25, "y": -0.40057180777346685 }, { "x": 26, "y": -0.42844437668447366 }, { "x": 27, "y": -0.4520360710085306 }, { "x": 28, "y": -0.47111117033432903 }, { "x": 29, "y": -0.4854790825747953 }, { "x": 30, "y": -0.4949962483002227 }, { "x": 31, "y": -0.49956757513663974 }, { "x": 32, "y": -0.49914738789737656 }, { "x": 33, "y": -0.49373988495443244 }, { "x": 34, "y": -0.48339909628973055 }, { "x": 35, "y": -0.46822834364539817 }, { "x": 36, "y": -0.4483792081670735 }, { "x": 37, "y": -0.424050015855204 }, { "x": 38, "y": -0.3954838559572084 }, { "x": 39, "y": -0.3629661521000701 }, { "x": 40, "y": -0.32682181043180597 }, { "x": 41, "y": -0.2874119732666346 }, { "x": 42, "y": -0.2451304106703497 }, { "x": 43, "y": -0.20039958603998773 }, { "x": 44, "y": -0.15366643498920968 }, { "x": 45, "y": -0.10539789971538985 }, { "x": 46, "y": -0.056076263467527435 }, { "x": 47, "y": -0.00619433173144528 }, { "x": 48, "y": 0.0437494917197232 }, { "x": 49, "y": 0.09325618471128788 }, { "x": 50, "y": 0.14183109273161312 }, { "x": 51, "y": 0.18898887135649012 }, { "x": 52, "y": 0.23425833565018855 }, { "x": 53, "y": 0.2771871680895804 }, { "x": 54, "y": 0.31734643797131734 }, { "x": 55, "y": 0.35433488714563 }, { "x": 56, "y": 0.3877829392551248 }, { "x": 57, "y": 0.4173563924195799 }, { "x": 58, "y": 0.44275975847065946 }, { "x": 59, "y": 0.46373921537201795 }, { "x": 60, "y": 0.480085143325183 }, { "x": 61, "y": 0.49163421922129225 }, { "x": 62, "y": 0.49827104851160875 }, { "x": 63, "y": 0.49992931819170755 }, { "x": 64, "y": 0.4965924593790963 }, { "x": 65, "y": 0.48829381286401174 }, { "x": 66, "y": 0.4751162959792648 }, { "x": 67, "y": 0.4571915741176597 }, { "x": 68, "y": 0.43469874517491264 }, { "x": 69, "y": 0.4078625500626784 }, { "x": 70, "y": 0.3769511271716523 }, { "x": 71, "y": 0.3422733332214033 }, { "x": 72, "y": 0.3041756572661273 }, { "x": 73, "y": 0.26303875869055265 }, { "x": 74, "y": 0.21927366378719518 }, { "x": 75, "y": 0.1733176589175129 }, { "x": 76, "y": 0.12562992129112785 }, { "x": 77, "y": 0.07668693101893218 }, { "x": 78, "y": 0.026977710281324875 }, { "x": 79, "y": -0.023001062819768475 }, { "x": 80, "y": -0.07275001690430677 }, { "x": 81, "y": -0.12177207686789555 }, { "x": 82, "y": -0.16957743049191726 }, { "x": 83, "y": -0.2156884224853104 }, { "x": 84, "y": -0.2596443270583428 }, { "x": 85, "y": -0.3010059513424118 }, { "x": 86, "y": -0.3393600236600062 }, { "x": 87, "y": -0.37432332279869934 }, { "x": 88, "y": -0.405546507030828 }, { "x": 89, "y": -0.43271760462055614 }, { "x": 90, "y": -0.45556513094233847 }, { "x": 91, "y": -0.47386080106555595 }, { "x": 92, "y": -0.4874218107020818 }, { "x": 93, "y": -0.4961126627263017 }, { "x": 94, "y": -0.49984652101760324 }, { "x": 95, "y": -0.4985860780981892 }, { "x": 96, "y": -0.4923439278970635 }, { "x": 97, "y": -0.4811824399156551 }, { "x": 98, "y": -0.46521313605237663 }, { "x": 99, "y": -0.44459557631268043 }], "key": "Cosine Wave", "color": "#2ca02c" }];
    nv.addGraph(function () {
        var chart = nv.models.lineChart();
        var fitScreen = false;
        var width = 600;
        var height = 200;
        var zoom = 1;

        chart.useInteractiveGuideline(true);
        chart.xAxis
      .tickFormat(d3.format(',r'));

        chart.yAxis
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format(',.2f'));
        chart.showLegend(false);
        d3.select('#' + ChartID + ' ')
      .attr('perserveAspectRatio', 'xMinYMid')
      .attr('width', width)
      .attr('height', height)
      .datum(Data_CompareChart1)
       .transition().duration(500)
        .call(chart);
        return chart;
    });



    function sinAndCos() {
        var sin = [],
      cos = [];

        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        return [
    {
        values: sin,
        key: "Sine Wave",
        color: "#ff7f0e"
    },
    {
        values: cos,
        key: "Cosine Wave",
        color: "#2ca02c"
    }
        ];
    }


}

//2

function Get_CompareChart2(ChartID) {

    var Data_CompareChart3 = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 1 }, { "x": 2, "y": 3 }, { "x": 3, "y": 4 }, { "x": 4, "y": 6 }, { "x": 5, "y": 8 }], "key": "Sine Wave", "color": "#ff7f0e" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 1 }, { "x": 2, "y": 2 }, { "x": 3, "y": 3 }, { "x": 4, "y": 5 }, { "x": 5, "y": 6 }], "key": "Cosine Wave", "color": "#2ca02c" }];

    var Data_CompareChart2 = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 0.09983341664682815 }, { "x": 2, "y": 0.19866933079506122 }, { "x": 3, "y": 0.29552020666133955 }, { "x": 4, "y": 0.3894183423086505 }, { "x": 5, "y": 0.479425538604203 }, { "x": 6, "y": 0.5646424733950354 }, { "x": 7, "y": 0.644217687237691 }, { "x": 8, "y": 0.7173560908995228 }, { "x": 9, "y": 0.7833269096274834 }, { "x": 10, "y": 0.8414709848078965 }, { "x": 11, "y": 0.8912073600614354 }, { "x": 12, "y": 0.9320390859672263 }, { "x": 13, "y": 0.963558185417193 }, { "x": 14, "y": 0.9854497299884601 }, { "x": 15, "y": 0.9974949866040544 }, { "x": 16, "y": 0.9995736030415051 }, { "x": 17, "y": 0.9916648104524686 }, { "x": 18, "y": 0.9738476308781951 }, { "x": 19, "y": 0.9463000876874145 }, { "x": 20, "y": 0.9092974268256817 }, { "x": 21, "y": 0.8632093666488737 }, { "x": 22, "y": 0.8084964038195901 }, { "x": 23, "y": 0.7457052121767203 }, { "x": 24, "y": 0.675463180551151 }, { "x": 25, "y": 0.5984721441039565 }, { "x": 26, "y": 0.5155013718214642 }, { "x": 27, "y": 0.4273798802338298 }, { "x": 28, "y": 0.3349881501559051 }, { "x": 29, "y": 0.23924932921398243 }, { "x": 30, "y": 0.1411200080598672 }, { "x": 31, "y": 0.04158066243329049 }, { "x": 32, "y": -0.058374143427580086 }, { "x": 33, "y": -0.1577456941432482 }, { "x": 34, "y": -0.2555411020268312 }, { "x": 35, "y": -0.35078322768961984 }, { "x": 36, "y": -0.44252044329485246 }, { "x": 37, "y": -0.5298361409084934 }, { "x": 38, "y": -0.6118578909427189 }, { "x": 39, "y": -0.6877661591839738 }, { "x": 40, "y": -0.7568024953079282 }, { "x": 41, "y": -0.8182771110644103 }, { "x": 42, "y": -0.8715757724135882 }, { "x": 43, "y": -0.9161659367494549 }, { "x": 44, "y": -0.951602073889516 }, { "x": 45, "y": -0.977530117665097 }, { "x": 46, "y": -0.9936910036334644 }, { "x": 47, "y": -0.9999232575641008 }, { "x": 48, "y": -0.9961646088358407 }, { "x": 49, "y": -0.9824526126243325 }, { "x": 50, "y": -0.9589242746631385 }, { "x": 51, "y": -0.9258146823277325 }, { "x": 52, "y": -0.8834546557201531 }, { "x": 53, "y": -0.8322674422239013 }, { "x": 54, "y": -0.7727644875559871 }, { "x": 55, "y": -0.7055403255703919 }, { "x": 56, "y": -0.6312666378723216 }, { "x": 57, "y": -0.5506855425976376 }, { "x": 58, "y": -0.46460217941375737 }, { "x": 59, "y": -0.373876664830236 }, { "x": 60, "y": -0.27941549819892586 }, { "x": 61, "y": -0.18216250427209588 }, { "x": 62, "y": -0.0830894028174964 }, { "x": 63, "y": 0.016813900484349713 }, { "x": 64, "y": 0.11654920485049364 }, { "x": 65, "y": 0.21511998808781552 }, { "x": 66, "y": 0.31154136351337786 }, { "x": 67, "y": 0.4048499206165983 }, { "x": 68, "y": 0.49411335113860816 }, { "x": 69, "y": 0.5784397643882001 }, { "x": 70, "y": 0.6569865987187891 }, { "x": 71, "y": 0.7289690401258759 }, { "x": 72, "y": 0.7936678638491531 }, { "x": 73, "y": 0.8504366206285644 }, { "x": 74, "y": 0.8987080958116269 }, { "x": 75, "y": 0.9379999767747389 }, { "x": 76, "y": 0.9679196720314863 }, { "x": 77, "y": 0.9881682338770004 }, { "x": 78, "y": 0.998543345374605 }, { "x": 79, "y": 0.998941341839772 }, { "x": 80, "y": 0.9893582466233818 }, { "x": 81, "y": 0.9698898108450863 }, { "x": 82, "y": 0.9407305566797731 }, { "x": 83, "y": 0.9021718337562933 }, { "x": 84, "y": 0.8545989080882804 }, { "x": 85, "y": 0.7984871126234903 }, { "x": 86, "y": 0.7343970978741133 }, { "x": 87, "y": 0.6629692300821833 }, { "x": 88, "y": 0.5849171928917617 }, { "x": 89, "y": 0.5010208564578846 }, { "x": 90, "y": 0.4121184852417566 }, { "x": 91, "y": 0.3190983623493521 }, { "x": 92, "y": 0.22288991410024764 }, { "x": 93, "y": 0.1244544235070617 }, { "x": 94, "y": 0.024775425453357765 }, { "x": 95, "y": -0.0751511204618093 }, { "x": 96, "y": -0.17432678122297965 }, { "x": 97, "y": -0.27176062641094245 }, { "x": 98, "y": -0.3664791292519284 }, { "x": 99, "y": -0.45753589377532133 }], "key": "Sine Wave", "color": "#ff7f0e" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 0.4975020826390129 }, { "x": 2, "y": 0.4900332889206208 }, { "x": 3, "y": 0.477668244562803 }, { "x": 4, "y": 0.46053049700144255 }, { "x": 5, "y": 0.4387912809451864 }, { "x": 6, "y": 0.41266780745483916 }, { "x": 7, "y": 0.38242109364224425 }, { "x": 8, "y": 0.3483533546735827 }, { "x": 9, "y": 0.3108049841353322 }, { "x": 10, "y": 0.2701511529340699 }, { "x": 11, "y": 0.22679806071278866 }, { "x": 12, "y": 0.1811788772383368 }, { "x": 13, "y": 0.13374941431229367 }, { "x": 14, "y": 0.08498357145012052 }, { "x": 15, "y": 0.03536860083385145 }, { "x": 16, "y": -0.014599761150644408 }, { "x": 17, "y": -0.06442224714776232 }, { "x": 18, "y": -0.11360104734654355 }, { "x": 19, "y": -0.16164478343175168 }, { "x": 20, "y": -0.2080734182735712 }, { "x": 21, "y": -0.2524230522999288 }, { "x": 22, "y": -0.2942505586276729 }, { "x": 23, "y": -0.33313801063991205 }, { "x": 24, "y": -0.3686968577706227 }, { "x": 25, "y": -0.40057180777346685 }, { "x": 26, "y": -0.42844437668447366 }, { "x": 27, "y": -0.4520360710085306 }, { "x": 28, "y": -0.47111117033432903 }, { "x": 29, "y": -0.4854790825747953 }, { "x": 30, "y": -0.4949962483002227 }, { "x": 31, "y": -0.49956757513663974 }, { "x": 32, "y": -0.49914738789737656 }, { "x": 33, "y": -0.49373988495443244 }, { "x": 34, "y": -0.48339909628973055 }, { "x": 35, "y": -0.46822834364539817 }, { "x": 36, "y": -0.4483792081670735 }, { "x": 37, "y": -0.424050015855204 }, { "x": 38, "y": -0.3954838559572084 }, { "x": 39, "y": -0.3629661521000701 }, { "x": 40, "y": -0.32682181043180597 }, { "x": 41, "y": -0.2874119732666346 }, { "x": 42, "y": -0.2451304106703497 }, { "x": 43, "y": -0.20039958603998773 }, { "x": 44, "y": -0.15366643498920968 }, { "x": 45, "y": -0.10539789971538985 }, { "x": 46, "y": -0.056076263467527435 }, { "x": 47, "y": -0.00619433173144528 }, { "x": 48, "y": 0.0437494917197232 }, { "x": 49, "y": 0.09325618471128788 }, { "x": 50, "y": 0.14183109273161312 }, { "x": 51, "y": 0.18898887135649012 }, { "x": 52, "y": 0.23425833565018855 }, { "x": 53, "y": 0.2771871680895804 }, { "x": 54, "y": 0.31734643797131734 }, { "x": 55, "y": 0.35433488714563 }, { "x": 56, "y": 0.3877829392551248 }, { "x": 57, "y": 0.4173563924195799 }, { "x": 58, "y": 0.44275975847065946 }, { "x": 59, "y": 0.46373921537201795 }, { "x": 60, "y": 0.480085143325183 }, { "x": 61, "y": 0.49163421922129225 }, { "x": 62, "y": 0.49827104851160875 }, { "x": 63, "y": 0.49992931819170755 }, { "x": 64, "y": 0.4965924593790963 }, { "x": 65, "y": 0.48829381286401174 }, { "x": 66, "y": 0.4751162959792648 }, { "x": 67, "y": 0.4571915741176597 }, { "x": 68, "y": 0.43469874517491264 }, { "x": 69, "y": 0.4078625500626784 }, { "x": 70, "y": 0.3769511271716523 }, { "x": 71, "y": 0.3422733332214033 }, { "x": 72, "y": 0.3041756572661273 }, { "x": 73, "y": 0.26303875869055265 }, { "x": 74, "y": 0.21927366378719518 }, { "x": 75, "y": 0.1733176589175129 }, { "x": 76, "y": 0.12562992129112785 }, { "x": 77, "y": 0.07668693101893218 }, { "x": 78, "y": 0.026977710281324875 }, { "x": 79, "y": -0.023001062819768475 }, { "x": 80, "y": -0.07275001690430677 }, { "x": 81, "y": -0.12177207686789555 }, { "x": 82, "y": -0.16957743049191726 }, { "x": 83, "y": -0.2156884224853104 }, { "x": 84, "y": -0.2596443270583428 }, { "x": 85, "y": -0.3010059513424118 }, { "x": 86, "y": -0.3393600236600062 }, { "x": 87, "y": -0.37432332279869934 }, { "x": 88, "y": -0.405546507030828 }, { "x": 89, "y": -0.43271760462055614 }, { "x": 90, "y": -0.45556513094233847 }, { "x": 91, "y": -0.47386080106555595 }, { "x": 92, "y": -0.4874218107020818 }, { "x": 93, "y": -0.4961126627263017 }, { "x": 94, "y": -0.49984652101760324 }, { "x": 95, "y": -0.4985860780981892 }, { "x": 96, "y": -0.4923439278970635 }, { "x": 97, "y": -0.4811824399156551 }, { "x": 98, "y": -0.46521313605237663 }, { "x": 99, "y": -0.44459557631268043 }], "key": "Cosine Wave", "color": "#2ca02c" }];
    nv.addGraph(function () {
        var chart = nv.models.lineChart();
        var fitScreen = false;
        var width = 600;
        var height = 200;
        var zoom = 1;

        chart.useInteractiveGuideline(true);
        chart.xAxis
      .tickFormat(d3.format(',r'));

        chart.yAxis
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format(',.2f'));
        chart.showLegend(false);
        d3.select('#' + ChartID + ' ')
      .attr('perserveAspectRatio', 'xMinYMid')
      .attr('width', width)
      .attr('height', height)
      .datum(Data_CompareChart3)
       .transition().duration(500)
        .call(chart);
        nv.utils.windowResize(chart.update);
        return chart;
    });



    function sinAndCos() {
        var sin = [],
      cos = [];

        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        return [
    {
        values: sin,
        key: "Sine Wave",
        color: "#ff7f0e"
    },
    {
        values: cos,
        key: "Cosine Wave",
        color: "#2ca02c"
    }
        ];
    }


}

//Modal2

function Get_LineChartModal2(ChartID) {

    var Data_CompareChart1 = [
    { "values": [{ "x": 0, "y": 0 }, { "x": 1, "y": 0.09983341664682815 }, { "x": 2, "y": 0.19866933079506122 }, { "x": 3, "y": 0.29552020666133955 }, { "x": 4, "y": 0.3894183423086505 }, { "x": 5, "y": 0.479425538604203 }, { "x": 6, "y": 0.5646424733950354 }, { "x": 7, "y": 0.644217687237691 }, { "x": 8, "y": 0.7173560908995228 }, { "x": 9, "y": 0.7833269096274834 }, { "x": 10, "y": 0.8414709848078965 }, { "x": 11, "y": 0.8912073600614354 }, { "x": 12, "y": 0.9320390859672263 }, { "x": 13, "y": 0.963558185417193 }, { "x": 14, "y": 0.9854497299884601 }, { "x": 15, "y": 0.9974949866040544 }, { "x": 16, "y": 0.9995736030415051 }, { "x": 17, "y": 0.9916648104524686 }, { "x": 18, "y": 0.9738476308781951 }, { "x": 19, "y": 0.9463000876874145 }, { "x": 20, "y": 0.9092974268256817 }, { "x": 21, "y": 0.8632093666488737 }, { "x": 22, "y": 0.8084964038195901 }, { "x": 23, "y": 0.7457052121767203 }, { "x": 24, "y": 0.675463180551151 }, { "x": 25, "y": 0.5984721441039565 }, { "x": 26, "y": 0.5155013718214642 }, { "x": 27, "y": 0.4273798802338298 }, { "x": 28, "y": 0.3349881501559051 }, { "x": 29, "y": 0.23924932921398243 }, { "x": 30, "y": 0.1411200080598672 }, { "x": 31, "y": 0.04158066243329049 }, { "x": 32, "y": -0.058374143427580086 }, { "x": 33, "y": -0.1577456941432482 }, { "x": 34, "y": -0.2555411020268312 }, { "x": 35, "y": -0.35078322768961984 }, { "x": 36, "y": -0.44252044329485246 }, { "x": 37, "y": -0.5298361409084934 }, { "x": 38, "y": -0.6118578909427189 }, { "x": 39, "y": -0.6877661591839738 }, { "x": 40, "y": -0.7568024953079282 }, { "x": 41, "y": -0.8182771110644103 }, { "x": 42, "y": -0.8715757724135882 }, { "x": 43, "y": -0.9161659367494549 }, { "x": 44, "y": -0.951602073889516 }, { "x": 45, "y": -0.977530117665097 }, { "x": 46, "y": -0.9936910036334644 }, { "x": 47, "y": -0.9999232575641008 }, { "x": 48, "y": -0.9961646088358407 }, { "x": 49, "y": -0.9824526126243325 }, { "x": 50, "y": -0.9589242746631385 }, { "x": 51, "y": -0.9258146823277325 }, { "x": 52, "y": -0.8834546557201531 }, { "x": 53, "y": -0.8322674422239013 }, { "x": 54, "y": -0.7727644875559871 }, { "x": 55, "y": -0.7055403255703919 }, { "x": 56, "y": -0.6312666378723216 }, { "x": 57, "y": -0.5506855425976376 }, { "x": 58, "y": -0.46460217941375737 }, { "x": 59, "y": -0.373876664830236 }, { "x": 60, "y": -0.27941549819892586 }, { "x": 61, "y": -0.18216250427209588 }, { "x": 62, "y": -0.0830894028174964 }, { "x": 63, "y": 0.016813900484349713 }, { "x": 64, "y": 0.11654920485049364 }, { "x": 65, "y": 0.21511998808781552 }, { "x": 66, "y": 0.31154136351337786 }, { "x": 67, "y": 0.4048499206165983 }, { "x": 68, "y": 0.49411335113860816 }, { "x": 69, "y": 0.5784397643882001 }, { "x": 70, "y": 0.6569865987187891 }, { "x": 71, "y": 0.7289690401258759 }, { "x": 72, "y": 0.7936678638491531 }, { "x": 73, "y": 0.8504366206285644 }, { "x": 74, "y": 0.8987080958116269 }, { "x": 75, "y": 0.9379999767747389 }, { "x": 76, "y": 0.9679196720314863 }, { "x": 77, "y": 0.9881682338770004 }, { "x": 78, "y": 0.998543345374605 }, { "x": 79, "y": 0.998941341839772 }, { "x": 80, "y": 0.9893582466233818 }, { "x": 81, "y": 0.9698898108450863 }, { "x": 82, "y": 0.9407305566797731 }, { "x": 83, "y": 0.9021718337562933 }, { "x": 84, "y": 0.8545989080882804 }, { "x": 85, "y": 0.7984871126234903 }, { "x": 86, "y": 0.7343970978741133 }, { "x": 87, "y": 0.6629692300821833 }, { "x": 88, "y": 0.5849171928917617 }, { "x": 89, "y": 0.5010208564578846 }, { "x": 90, "y": 0.4121184852417566 }, { "x": 91, "y": 0.3190983623493521 }, { "x": 92, "y": 0.22288991410024764 }, { "x": 93, "y": 0.1244544235070617 }, { "x": 94, "y": 0.024775425453357765 }, { "x": 95, "y": -0.0751511204618093 }, { "x": 96, "y": -0.17432678122297965 }, { "x": 97, "y": -0.27176062641094245 }, { "x": 98, "y": -0.3664791292519284 }, { "x": 99, "y": -0.45753589377532133 }], "key": "Quantity1", "color": "#04A9DE" },
    { "values": [{ "x": 0, "y": 0.5 }, { "x": 1, "y": 0.4975020826390129 }, { "x": 2, "y": 0.4900332889206208 }, { "x": 3, "y": 0.477668244562803 }, { "x": 4, "y": 0.46053049700144255 }, { "x": 5, "y": 0.4387912809451864 }, { "x": 6, "y": 0.41266780745483916 }, { "x": 7, "y": 0.38242109364224425 }, { "x": 8, "y": 0.3483533546735827 }, { "x": 9, "y": 0.3108049841353322 }, { "x": 10, "y": 0.2701511529340699 }, { "x": 11, "y": 0.22679806071278866 }, { "x": 12, "y": 0.1811788772383368 }, { "x": 13, "y": 0.13374941431229367 }, { "x": 14, "y": 0.08498357145012052 }, { "x": 15, "y": 0.03536860083385145 }, { "x": 16, "y": -0.014599761150644408 }, { "x": 17, "y": -0.06442224714776232 }, { "x": 18, "y": -0.11360104734654355 }, { "x": 19, "y": -0.16164478343175168 }, { "x": 20, "y": -0.2080734182735712 }, { "x": 21, "y": -0.2524230522999288 }, { "x": 22, "y": -0.2942505586276729 }, { "x": 23, "y": -0.33313801063991205 }, { "x": 24, "y": -0.3686968577706227 }, { "x": 25, "y": -0.40057180777346685 }, { "x": 26, "y": -0.42844437668447366 }, { "x": 27, "y": -0.4520360710085306 }, { "x": 28, "y": -0.47111117033432903 }, { "x": 29, "y": -0.4854790825747953 }, { "x": 30, "y": -0.4949962483002227 }, { "x": 31, "y": -0.49956757513663974 }, { "x": 32, "y": -0.49914738789737656 }, { "x": 33, "y": -0.49373988495443244 }, { "x": 34, "y": -0.48339909628973055 }, { "x": 35, "y": -0.46822834364539817 }, { "x": 36, "y": -0.4483792081670735 }, { "x": 37, "y": -0.424050015855204 }, { "x": 38, "y": -0.3954838559572084 }, { "x": 39, "y": -0.3629661521000701 }, { "x": 40, "y": -0.32682181043180597 }, { "x": 41, "y": -0.2874119732666346 }, { "x": 42, "y": -0.2451304106703497 }, { "x": 43, "y": -0.20039958603998773 }, { "x": 44, "y": -0.15366643498920968 }, { "x": 45, "y": -0.10539789971538985 }, { "x": 46, "y": -0.056076263467527435 }, { "x": 47, "y": -0.00619433173144528 }, { "x": 48, "y": 0.0437494917197232 }, { "x": 49, "y": 0.09325618471128788 }, { "x": 50, "y": 0.14183109273161312 }, { "x": 51, "y": 0.18898887135649012 }, { "x": 52, "y": 0.23425833565018855 }, { "x": 53, "y": 0.2771871680895804 }, { "x": 54, "y": 0.31734643797131734 }, { "x": 55, "y": 0.35433488714563 }, { "x": 56, "y": 0.3877829392551248 }, { "x": 57, "y": 0.4173563924195799 }, { "x": 58, "y": 0.44275975847065946 }, { "x": 59, "y": 0.46373921537201795 }, { "x": 60, "y": 0.480085143325183 }, { "x": 61, "y": 0.49163421922129225 }, { "x": 62, "y": 0.49827104851160875 }, { "x": 63, "y": 0.49992931819170755 }, { "x": 64, "y": 0.4965924593790963 }, { "x": 65, "y": 0.48829381286401174 }, { "x": 66, "y": 0.4751162959792648 }, { "x": 67, "y": 0.4571915741176597 }, { "x": 68, "y": 0.43469874517491264 }, { "x": 69, "y": 0.4078625500626784 }, { "x": 70, "y": 0.3769511271716523 }, { "x": 71, "y": 0.3422733332214033 }, { "x": 72, "y": 0.3041756572661273 }, { "x": 73, "y": 0.26303875869055265 }, { "x": 74, "y": 0.21927366378719518 }, { "x": 75, "y": 0.1733176589175129 }, { "x": 76, "y": 0.12562992129112785 }, { "x": 77, "y": 0.07668693101893218 }, { "x": 78, "y": 0.026977710281324875 }, { "x": 79, "y": -0.023001062819768475 }, { "x": 80, "y": -0.07275001690430677 }, { "x": 81, "y": -0.12177207686789555 }, { "x": 82, "y": -0.16957743049191726 }, { "x": 83, "y": -0.2156884224853104 }, { "x": 84, "y": -0.2596443270583428 }, { "x": 85, "y": -0.3010059513424118 }, { "x": 86, "y": -0.3393600236600062 }, { "x": 87, "y": -0.37432332279869934 }, { "x": 88, "y": -0.405546507030828 }, { "x": 89, "y": -0.43271760462055614 }, { "x": 90, "y": -0.45556513094233847 }, { "x": 91, "y": -0.47386080106555595 }, { "x": 92, "y": -0.4874218107020818 }, { "x": 93, "y": -0.4961126627263017 }, { "x": 94, "y": -0.49984652101760324 }, { "x": 95, "y": -0.4985860780981892 }, { "x": 96, "y": -0.4923439278970635 }, { "x": 97, "y": -0.4811824399156551 }, { "x": 98, "y": -0.46521313605237663 }, { "x": 99, "y": -0.44459557631268043 }], "key": "Quantity2", "color": "#6BBE62" }];
    nv.addGraph(function () {
        var chart = nv.models.lineChart();
        var fitScreen = true;
        //        var width = 400;
        //        var height = 100;
        var zoom = 1;

        chart.useInteractiveGuideline(true);
        chart.xAxis
      .tickFormat(d3.format(',r'));

        chart.yAxis
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format(',.2f'));
        chart.showLegend(false);

        chart.tooltipContent(function (key, x, y, e, graph) {
            return '<div class="tooltip-panel-s1"><img src="img/User-Img.png" class="tooltip-user-img-s1"><div class="tooltip-info-cell"><div class="tooltip-title-cell-s1">' +
                                    '<label class="label-tooltip-title-s1" style="color:' + ToolTipContent(Data_CompareChart1, key, x, y) + '"> Name: <span>Nancy Davolio</span></label></div><label class="label-tooltip-title-s1"><span style="color:' + ToolTipContent(Data_CompareChart1, key, x, y) + '">' + x + '</span></label>' +
                                '<label class="label-tooltip-title-s1"> New Patients: <span style="color:' + ToolTipContent(Data_CompareChart1, key, x, y) + '">' + y + '</span></label></div></div>'
        });


        d3.select('#' + ChartID + ' ')
      .attr('perserveAspectRatio', 'xMinYMid')
//      .attr('width', width)
//      .attr('height', height)
      .datum(Data_CompareChart1)
       .transition().duration(500)
        .call(chart);
        nv.utils.windowResize(chart.update);
        return chart;
    });



    function sinAndCos() {
        var sin = [],
      cos = [];

        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        return [
    {
        values: sin,
        key: "Sine Wave",
        color: "#ff7f0e"
    },
    {
        values: cos,
        key: "Cosine Wave",
        color: "#2ca02c"
    }
        ];
    }


}
function ToolTipContent(data, key, x, y) {
    var color = "";
    var _temp = [];
    $.each(data, function (index, item) {
        if (item.key == key) {
            color = item.color;
        }

    });

    return color;

}

//Modal3


function Get_LineChartModal3(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
//        .width(1300)
//        .height(300)
//                .margin({ left: 100 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Time (ms)')
      .tickFormat(d3.format(',r'));

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format('.02f'));

        /* Done setting the chart up? Time to render it!*/
        var myData = sinAndCos();   //You need data...
        chart.tooltipContent(function (key, x, y, e, graph) {
            return '<div class="tooltip-tile-s2"><label class="label-tooltip-kpi-title-s2">Thursday Feb 27, 2014 at 16:43:05</label><div class="tooltip-kpi-title-s2"><label class="label-tooltip-kpi-qs-data" style="color:' + ToolTipContent(myData, key, x, y) + '">' + y + ' on' + x + '</label><label class="label-tooltip-kpi-title-s2">for </label>' + "   " + '<label class="label-tooltip-kpi-data-s1">' + key + '</label><br></div></div>'
        });

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });
    /**************************************
    * Simple test data generator
    */
    function sinAndCos() {
        var sin = [], sin2 = [],
      cos = [];

        //Data is represented as an array of {x,y} pairs.
        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            sin2.push({ x: i, y: Math.sin(i / 10) * 0.25 + 0.5 });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        //Line chart data should be sent as an array of series objects.
        return [
    {
        values: sin,      //values - represents the array of {x,y} data points
        key: 'Sine Wave', //key  - the name of the series.
        color: '#ff7f0e'  //color - optional: choose your own line color.
    },
    {
        values: cos,
        key: 'Cosine Wave',
        color: '#2ca02c',

    },
    {
        values: sin2,
        key: 'Another sine wave',
        color: '#7777ff',
        area: true      //area - set to true if you want this line to turn into a filled area chart.
    }
        ];
    }
}
function ToolTipContent(data, key, x, y) {
    var color = "";
    var _temp = [];
    $.each(data, function (index, item) {
        if (item.key == key) {
            color = item.color;
        }

    });

    return color;
}

//CompareLeads

function Get_LineChartCompareLeads(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
      //  .width(1300)
        .height(300)
                .margin({ left: 100 })  //Adjust chart margins to give the x-axis some breathing room.

                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Time (ms)')
      .tickFormat(d3.format(',r'));

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Voltage (V)')
      .tickFormat(d3.format('.02f'));

        /* Done setting the chart up? Time to render it!*/
        var myData = sinAndCos();   //You need data...

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });

        return chart;
    });
    /**************************************
    * Simple test data generator
    */
    function sinAndCos() {
        var sin = [], sin2 = [],
      cos = [];

        //Data is represented as an array of {x,y} pairs.
        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            sin2.push({ x: i, y: Math.sin(i / 10) * 0.25 + 0.5 });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        //Line chart data should be sent as an array of series objects.
        return [
    {
        values: sin,      //values - represents the array of {x,y} data points
        key: 'Wave1', //key  - the name of the series.
        color: '#6BB0D2'  //color - optional: choose your own line color.
    },
    {
        values: cos,
        key: 'Wave2',
        color: '#2ca02c',
        area: true      //area - set to true if you want this line to turn into a filled area chart.

    },
    {
        values: sin2,
        key: 'Wave3',
        color: '#7B94AF',
        area: true      //area - set to true if you want this line to turn into a filled area chart.
    }
        ];
    }
}
//LineType1

function Get_LineChartType1(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
        .interpolate("monotone")
       // .width(1300)
        .height(225)

                .margin({ left: 50, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)
                 .tooltipContent(function (key, x, y, e, graph) {
                     return '<center><b><h3>' + y + "on" + x + '<center></center>'
                 })
                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Date Added')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['3-Nov', '9-Nov', '15-Nov', '21-Nov', '3-Dec', '9-Dec', '15-Dec', '21-Dec', '27-Dec', '2-Jan', '8-Jan'][d];
      });

        chart.yAxis     //Chart y-axis settings
       .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Indeed:",
            "color": "#0BC9FF",
            "area": true,
            "values": [{
                "x": 0,
                "y": 320
            }, {
                "x": 1,
                "y": 300
            }, {
                "x": 2,
                "y": 270
            }, {
                "x": 3,
                "y": 240
            }, {
                "x": 4,
                "y": 355
            }, {
                "x": 5,
                "y": 280
            }, {
                "x": 6,
                "y": 207
            }, {
                "x": 7,
                "y": 150
            }, {
                "x": 8,
                "y": 326
            }, {
                "x": 9,
                "y": 300
            },
            {
                "x": 10,
                "y": 82
            }]

        },
     {
         "key": "Job board:",
         "color": "#5FBA50",
         "area": true,
         "values": [{
             "x": 0,
             "y": 130
         }, {
             "x": 1,
             "y": 122
         }, {
             "x": 2,
             "y": 125
         }, {
             "x": 3,
             "y": 133
         }, {
             "x": 4,
             "y": 158
         }, {
             "x": 5,
             "y": 156
         }, {
             "x": 6,
             "y": 157
         }, {
             "x": 7,
             "y": 155
         }, {
             "x": 8,
             "y": 136
         }, {
             "x": 9,
             "y": 163
         },
         {
             "x": 10,
             "y": 62
         }]

     }, {
         "key": "Web app:",
         "color": "#FAA83B",
         "area": true,
         "values": [{
             "x": 0,
             "y": 40
         }, {
             "x": 1,
             "y": 42
         }, {
             "x": 2,
             "y": 152
         }, {
             "x": 3,
             "y": 133
         }, {
             "x": 4,
             "y": 75
         }, {
             "x": 5,
             "y": 68
         }, {
             "x": 6,
             "y": 37
         }, {
             "x": 7,
             "y": 35
         }, {
             "x": 8,
             "y": 46
         }, {
             "x": 9,
             "y": 43
         },
         {
             "x": 10,
             "y": 22
         }]

     },
     {
         "key": "Monster:",
         "color": "#C94D67",
         "area": true,
         "values": [{
             "x": 0,
             "y": 15
         }, {
             "x": 1,
             "y": 32
         }, {
             "x": 2,
             "y": 62
         }, {
             "x": 3,
             "y": 83
         }, {
             "x": 4,
             "y": 75
         }, {
             "x": 5,
             "y": 48
         }, {
             "x": 6,
             "y": 47
         }, {
             "x": 7,
             "y": 35
         }, {
             "x": 8,
             "y": 56
         }, {
             "x": 9,
             "y": 23
         },
         {
             "x": 10,
             "y": 22
         }]

     }

        ];


        chart.forceY([0, 400]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}

//sample

function Get_LineChartModalProduct(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)
                .margin({ left: 80 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Time (ms)')
      .tickFormat(d3.format(',r'));

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format('.02f'));

        /* Done setting the chart up? Time to render it!*/
        var myData = sinAndCos();   //You need data...

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });
    /**************************************
    * Simple test data generator
    */
    function sinAndCos() {
        var sin = [], sin2 = [],
      cos = [];

        //Data is represented as an array of {x,y} pairs.
        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            sin2.push({ x: i, y: Math.sin(i / 10) * 0.25 + 0.5 });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        //Line chart data should be sent as an array of series objects.
        return [
    {
        values: sin,      //values - represents the array of {x,y} data points
        key: 'Sine Wave', //key  - the name of the series.
        color: '#ff7f0e'  //color - optional: choose your own line color.
    },
    {
        values: cos,
        key: 'Cosine Wave',
        color: '#2ca02c',

    },
    {
        values: sin2,
        key: 'Another sine wave',
        color: '#7777ff',
        area: true      //area - set to true if you want this line to turn into a filled area chart.
    }
        ];
    }
}


//TrendAnalysis

function Get_LineChartTrendAnalysis(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(400)
        .height(180)

                .margin({ left: 30, right: 30 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Monday', 'Tueseday', 'Wednesday', 'Thursday', 'Friday'][d];
      });

        chart.yAxis.ticks(5)     //Chart y-axis settings
      .axisLabel('')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Count: ",
            "color": "#F16B50",
            "values": [{
                "x": 0,
                "y": 100
            }, {
                "x": 1,
                "y": 36
            }, {
                "x": 2,
                "y": 20
            }, {
                "x": 3,
                "y": 72
            }, {
                "x": 4,
                "y": 86
            }]

        },
     {
         "key": "Returns: ",
         "area": true,
         "color": "#5CB74F",
         "values": [{
             "x": 0,
             "y": 55
         }, {
             "x": 1,
             "y": 26
         }, {
             "x": 2,
             "y": 84
         }, {
             "x": 3,
             "y": 48
         }, {
             "x": 4,
             "y": 74
         }]

     }

        ];


        chart.forceY([0, 100]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
function Get_LineChartTrendAnalysis1(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
//        .width(cWidth)
//        .height(200)

                //.margin({ left: 30, right:30, bottom:60 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'][d];
      });

        chart.yAxis.ticks(5)     //Chart y-axis settings
      .axisLabel('')
      .tickFormat(function (f) { return "$" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Adjustments: ",
            "area": true,
            "color": "#99AB6F",
            "values": [{
                "x": 0,
                "y": 70
            }, {
                "x": 1,
                "y": 36
            }, {
                "x": 2,
                "y": 58
            }, {
                "x": 3,
                "y": 72
            }, {
                "x": 4,
                "y": 86
            }]

        }

        ];


        chart.forceY([0, 100]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
//2

function Get_LineChartTrendAnalysis2(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('October 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['01 Nov', '02 Nov', '03 Nov', '04 Nov', '05 Nov', '06 Nov', '07 Nov', '08 Nov', '09 Nov', '10 Nov', '11 Nov', '12 Nov', '13 Nov', '14 Nov', '15 Nov', '16 Nov', '17 Nov', '18 Nov', '19 Nov', '20 Nov', '21 Nov', '22 Nov'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Patient Count')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Patients Attended: ",
            "color": "#9ED191",
            "values": [{
                "x": 0,
                "y": 2
            }, {
                "x": 1,
                "y": 5
            }, {
                "x": 2,
                "y": 2
            }, {
                "x": 3,
                "y": 6
            }, {
                "x": 4,
                "y": 1
            }, {
                "x": 5,
                "y": 8
            }, {
                "x": 6,
                "y": 3
            }, {
                "x": 7,
                "y": 0
            }, {
                "x": 8,
                "y": 0
            }, {
                "x": 9,
                "y": 3
            }, {
                "x": 10,
                "y": 8
            }, {
                "x": 11,
                "y": 1
            }, {
                "x": 12,
                "y": 8
            }, {
                "x": 13,
                "y": 2
            }, {
                "x": 14,
                "y": 0
            }, {
                "x": 15,
                "y": 0
            }, {
                "x": 16,
                "y": 5
            }, {
                "x": 17,
                "y": 8
            }, {
                "x": 18,
                "y": 1
            }, {
                "x": 19,
                "y": 8
            }, {
                "x": 20,
                "y": 9
            }, {
                "x": 21,
                "y": 0
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}

//StaffTrend

function Get_LineChartStaffTrendWeek(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Monday', 'Tuesday', 'wednesday', 'Thursday', 'Friday'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Staff Count')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Staff Attended: ",
            "color": "#E38700",
            "values": [{
                "x": 0,
                "y": 9
            }, {
                "x": 1,
                "y": 3
            }, {
                "x": 2,
                "y": 8
            }, {
                "x": 3,
                "y": 4
            }, {
                "x": 4,
                "y": 2
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
function Get_LineChartTrendMonth(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['01 Nov', '02 Nov', '03 Nov', '04 Nov', '05 Nov', '06 Nov', '07 Nov', '08 Nov', '09 Nov', '10 Nov', '11 Nov', '12 Nov', '13 Nov', '14 Nov', '15 Nov', '16 Nov', '17 Nov', '18 Nov', '19 Nov', '20 Nov', '21 Nov', '22 Nov'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Staff Count')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Staff Attended: ",
            "color": "#E38700",
            "values": [{
                "x": 0,
                "y": 5
            }, {
                "x": 1,
                "y": 3
            }, {
                "x": 2,
                "y": 1
            }, {
                "x": 3,
                "y": 9
            }, {
                "x": 4,
                "y": 2
            }, {
                "x": 5,
                "y": 9
            }, {
                "x": 6,
                "y": 1
            }, {
                "x": 7,
                "y": 0
            }, {
                "x": 8,
                "y": 0
            }, {
                "x": 9,
                "y": 9
            }, {
                "x": 10,
                "y": 4
            }, {
                "x": 11,
                "y": 7
            }, {
                "x": 12,
                "y": 4
            }, {
                "x": 13,
                "y": 2
            }, {
                "x": 14,
                "y": 0
            }, {
                "x": 15,
                "y": 0
            }, {
                "x": 16,
                "y": 9
            }, {
                "x": 17,
                "y": 4
            }, {
                "x": 18,
                "y": 6
            }, {
                "x": 19,
                "y": 3
            }, {
                "x": 20,
                "y": 7
            }, {
                "x": 21,
                "y": 0
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}

//Productive


function Get_LineChartProductiveTrendWeek(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Monday', 'Tuesday', 'wednesday', 'Thursday', 'Friday'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Productive Hours')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Productive Hours: ",
            "color": "#499CCB",
            "values": [{
                "x": 0,
                "y": 4
            }, {
                "x": 1,
                "y": 7
            }, {
                "x": 2,
                "y": 3
            }, {
                "x": 3,
                "y": 5
            }, {
                "x": 4,
                "y": 4
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
function Get_LineChartProductiveTrendMonth(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
        //.width(900)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['01 Nov', '02 Nov', '03 Nov', '04 Nov', '05 Nov', '06 Nov', '07 Nov', '08 Nov', '09 Nov', '10 Nov', '11 Nov', '12 Nov', '13 Nov', '14 Nov', '15 Nov', '16 Nov', '17 Nov', '18 Nov', '19 Nov', '20 Nov', '21 Nov', '22 Nov'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Productive Hours')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Productive Hours: ",
            "color": "#499CCB",
            "values": [{
                "x": 0,
                "y": 6
            }, {
                "x": 1,
                "y": 7
            }, {
                "x": 2,
                "y": 4
            }, {
                "x": 3,
                "y": 4
            }, {
                "x": 4,
                "y": 1
            }, {
                "x": 5,
                "y": 2
            }, {
                "x": 6,
                "y": 8
            }, {
                "x": 7,
                "y": 0
            }, {
                "x": 8,
                "y": 0
            }, {
                "x": 9,
                "y": 4
            }, {
                "x": 10,
                "y": 7
            }, {
                "x": 11,
                "y": 4
            }, {
                "x": 12,
                "y": 7
            }, {
                "x": 13,
                "y": 6
            }, {
                "x": 14,
                "y": 0
            }, {
                "x": 15,
                "y": 0
            }, {
                "x": 16,
                "y": 7
            }, {
                "x": 17,
                "y": 9
            }, {
                "x": 18,
                "y": 2
            }, {
                "x": 19,
                "y": 8
            }, {
                "x": 20,
                "y": 8
            }, {
                "x": 21,
                "y": 0
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}

//Overtime


function Get_LineChartOvertimeTrendWeek(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Monday', 'Tuesday', 'wednesday', 'Thursday', 'Friday'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Overtime Hours')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Overtime Hours: ",
            "color": "#FBB26D",
            "values": [{
                "x": 0,
                "y": 4
            }, {
                "x": 1,
                "y": 7
            }, {
                "x": 2,
                "y": 3
            }, {
                "x": 3,
                "y": 5
            }, {
                "x": 4,
                "y": 4
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
function Get_LineChartOvertimeTrendMonth(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
        //.width(900)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['01 Nov', '02 Nov', '03 Nov', '04 Nov', '05 Nov', '06 Nov', '07 Nov', '08 Nov', '09 Nov', '10 Nov', '11 Nov', '12 Nov', '13 Nov', '14 Nov', '15 Nov', '16 Nov', '17 Nov', '18 Nov', '19 Nov', '20 Nov', '21 Nov', '22 Nov'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Overtime Hours')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "No of Overtime Hours: ",
            "color": "#FBB26D",
            "values": [{
                "x": 0,
                "y": 6
            }, {
                "x": 1,
                "y": 7
            }, {
                "x": 2,
                "y": 4
            }, {
                "x": 3,
                "y": 4
            }, {
                "x": 4,
                "y": 1
            }, {
                "x": 5,
                "y": 2
            }, {
                "x": 6,
                "y": 8
            }, {
                "x": 7,
                "y": 0
            }, {
                "x": 8,
                "y": 0
            }, {
                "x": 9,
                "y": 4
            }, {
                "x": 10,
                "y": 7
            }, {
                "x": 11,
                "y": 4
            }, {
                "x": 12,
                "y": 7
            }, {
                "x": 13,
                "y": 6
            }, {
                "x": 14,
                "y": 0
            }, {
                "x": 15,
                "y": 0
            }, {
                "x": 16,
                "y": 7
            }, {
                "x": 17,
                "y": 9
            }, {
                "x": 18,
                "y": 2
            }, {
                "x": 19,
                "y": 8
            }, {
                "x": 20,
                "y": 8
            }, {
                "x": 21,
                "y": 0
            }]

        }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
//OverAllCount

function Get_LineChartOverAllCountTrendWeek(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
       // .width(1300)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Monday', 'Tuesday', 'wednesday', 'Thursday', 'Friday'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('OverAll Count')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Over All Count: ",
            "color": "#ED4E6E",
            "values": [{
                "x": 0,
                "y": 40
            }, {
                "x": 1,
                "y": 43
            }, {
                "x": 2,
                "y": 30
            }, {
                "x": 3,
                "y": 52
            }, {
                "x": 4,
                "y": 46
            }]

        }

        ];


        chart.forceY([0, 50]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
function Get_LineChartOverallTrendMonth(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
        //.width(900)
        .height(180)

                .margin({ left: 100, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)

                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Nov 2014')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['01 Nov', '02 Nov', '03 Nov', '04 Nov', '05 Nov', '06 Nov', '07 Nov', '08 Nov', '09 Nov', '10 Nov', '11 Nov', '12 Nov', '13 Nov', '14 Nov', '15 Nov', '16 Nov', '17 Nov', '18 Nov', '19 Nov', '20 Nov', '21 Nov', '22 Nov'][d];
      });

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Overtime Hours')
      .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Over All Count: ",
            "color": "#ED4E6E",
            "values": [{
                "x": 0,
                "y": 66
            }, {
                "x": 1,
                "y": 72
            }, {
                "x": 2,
                "y": 43
            }, {
                "x": 3,
                "y": 42
            }, {
                "x": 4,
                "y": 17
            }, {
                "x": 5,
                "y": 28
            }, {
                "x": 6,
                "y": 56
            }, {
                "x": 7,
                "y": 0
            }, {
                "x": 8,
                "y": 0
            }, {
                "x": 9,
                "y": 47
            }, {
                "x": 10,
                "y": 74
            }, {
                "x": 11,
                "y": 43
            }, {
                "x": 12,
                "y": 73
            }, {
                "x": 13,
                "y": 65
            }, {
                "x": 14,
                "y": 0
            }, {
                "x": 15,
                "y": 0
            }, {
                "x": 16,
                "y": 77
            }, {
                "x": 17,
                "y": 92
            }, {
                "x": 18,
                "y": 20
            }, {
                "x": 19,
                "y": 84
            }, {
                "x": 20,
                "y": 58
            }, {
                "x": 21,
                "y": 0
            }]

        }

        ];


        chart.forceY([0, 100]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}

//LineType2
function Get_LineChartType2(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
        .interpolate("basis")
       // .width(1300)
        .height(280)

                .margin({ left: 50, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)
                 .tooltipContent(function (key, x, y, e, graph) {
                     return '<center><b><h3>' + y + "on" + x + '<center></center>'
                 })
                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Date Added')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['3-Nov', '9-Nov', '15-Nov', '21-Nov', '3-Dec', '9-Dec', '15-Dec', '21-Dec', '27-Dec', '2-Jan', '8-Jan'][d];
      });

        chart.yAxis     //Chart y-axis settings
       .tickFormat(function (f) { return "" + f; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Job Order:",
            "color": "#0BC9FF",
            "values": [{
                "x": 0,
                "y": 320
            }, {
                "x": 1,
                "y": 300
            }, {
                "x": 2,
                "y": 270
            }, {
                "x": 3,
                "y": 240
            }, {
                "x": 4,
                "y": 355
            }, {
                "x": 5,
                "y": 280
            }, {
                "x": 6,
                "y": 207
            }, {
                "x": 7,
                "y": 150
            }, {
                "x": 8,
                "y": 326
            }, {
                "x": 9,
                "y": 300
            },
           {
               "x": 10,
               "y": 82
           }]

        },
     {
         "key": "Internal Submisson",
         "color": "#5FBA50",
         "values": [{
             "x": 0,
             "y": 130
         }, {
             "x": 1,
             "y": 122
         }, {
             "x": 2,
             "y": 125
         }, {
             "x": 3,
             "y": 133
         }, {
             "x": 4,
             "y": 158
         }, {
             "x": 5,
             "y": 156
         }, {
             "x": 6,
             "y": 157
         }, {
             "x": 7,
             "y": 155
         }, {
             "x": 8,
             "y": 136
         }, {
             "x": 9,
             "y": 163
         },
         {
             "x": 10,
             "y": 62
         }]

     }, {
         "key": "Sendout",
         "color": "#E1DB3F",
         "values": [{
             "x": 0,
             "y": 40
         }, {
             "x": 1,
             "y": 42
         }, {
             "x": 2,
             "y": 152
         }, {
             "x": 3,
             "y": 133
         }, {
             "x": 4,
             "y": 75
         }, {
             "x": 5,
             "y": 68
         }, {
             "x": 6,
             "y": 37
         }, {
             "x": 7,
             "y": 35
         }, {
             "x": 8,
             "y": 46
         }, {
             "x": 9,
             "y": 43
         },
          {
              "x": 10,
              "y": 22
          }]

     },
     {
         "key": "Interview",
         "color": "#C94D67",
         "values": [{
             "x": 0,
             "y": 15
         }, {
             "x": 1,
             "y": 32
         }, {
             "x": 2,
             "y": 62
         }, {
             "x": 3,
             "y": 83
         }, {
             "x": 4,
             "y": 75
         }, {
             "x": 5,
             "y": 48
         }, {
             "x": 6,
             "y": 47
         }, {
             "x": 7,
             "y": 35
         }, {
             "x": 8,
             "y": 56
         }, {
             "x": 9,
             "y": 23
         },
        {
            "x": 10,
            "y": 22
        }]

     },
     {
         "key": "Placement",
         "color": "#FFC23E",
         "values": [{
             "x": 0,
             "y": 215
         }, {
             "x": 1,
             "y": 312
         }, {
             "x": 2,
             "y": 162
         }, {
             "x": 3,
             "y": 283
         }, {
             "x": 4,
             "y": 175
         }, {
             "x": 5,
             "y": 248
         }, {
             "x": 6,
             "y": 147
         }, {
             "x": 7,
             "y": 135
         }, {
             "x": 8,
             "y": 256
         }, {
             "x": 9,
             "y": 123
         },
        {
            "x": 10,
            "y": 222
        }]

     }

        ];


        chart.forceY([0, 400]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
//Type3
function Get_LineChartType3(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
         .interpolate("monotone")
       // .width(1300)
        .height(250)

                .margin({ left: 80, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)
                 .tooltipContent(function (key, x, y, e, graph) {
                     return '<center><b><h3>' + y + "on" + x + '<center></center>'
                 })
                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Quarter')
      .tickFormat(function (d, i) {
          //             alert(d+"  "+i);
          //            var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          //             now = new Date(now); // + d * 86400 * 1000);

          return ['Q1 13', 'Q2 13', 'Q3 13', 'Q4 13', 'Q1 14'][d];
      });

        chart.yAxis.axisLabel("Conversion Rate").width(60)     //Chart y-axis settings
        .tickFormat(function (f) { return f + "%"; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [{
            "key": "Lead:",
            "color": "#0BC9FF",
            "values": [{
                "x": 0,
                "y": 320
            }, {
                "x": 1,
                "y": 300
            }, {
                "x": 2,
                "y": 270
            }, {
                "x": 3,
                "y": 140
            }, {
                "x": 4,
                "y": 355
            }]

        },
     {
         "key": "MQL",
         "color": "#5FBA50",
         "values": [{
             "x": 0,
             "y": 130
         }, {
             "x": 1,
             "y": 122
         }, {
             "x": 2,
             "y": 225
         }, {
             "x": 3,
             "y": 333
         }, {
             "x": 4,
             "y": 158
         }]

     }, {
         "key": "TQL",
         "color": "#E1DB3F",
         "values": [{
             "x": 0,
             "y": 40
         }, {
             "x": 1,
             "y": 42
         }, {
             "x": 2,
             "y": 152
         }, {
             "x": 3,
             "y": 133
         }, {
             "x": 4,
             "y": 75
         }]

     }

        ];


        chart.forceY([0, 400]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}


//LinewithViewFinder
function Get_LineChartwithViewFinder(ChartID) {
    var testdata = [
       {
           "key": "Flow %",
           "values": [{
               "x": 0, "y": 83
           }, {
               "x": 1, "y": 92
           },
           {
               "x": 2, "y": 99
           }, {
               "x": 3, "y": 100
           }, {
               "x": 4, "y": 98
           }, {
               "x": 5, "y": 79
           }, {
               "x": 6, "y": 77
           }, {
               "x": 7, "y": 75
           }, {
               "x": 8, "y": 72
           }, {
               "x": 9, "y": 68
           }, {
               "x": 10, "y": 64
           }, {
               "x": 11, "y": 60
           }]
       }
    ];



    nv.addGraph(function () {
        var chart = nv.models.lineWithFocusChart()
        .margin({ bottom: 80 })
        .interpolate("monotone");
        chart.xAxis.orient('bottom').tickPadding(5).axisLabel("Months")
              .tickFormat(function (d, i) {
                  return ['Mar-03', 'Apr-03', 'May-03', 'Jun-03', 'Jul-03', 'Aug-03', 'Sep-03', 'Oct-03', 'Nov-03', 'Dec-03', 'Jan-04', 'Feb-04'][d];
              });

        chart.yAxis
            .tickFormat(d3.format(',.2f'));

        chart.y2Axis
            .tickFormat(d3.format(',.2f'));
        // data=testData();
        //Creates new tooltip container, or uses existing one on DOM.
        chart.tooltipContent(function (key, x, y, e, graph) {
            return '<div class="tooltip-tile-s2"><label class="label-tooltip-kpi-title-s2">Thursday Feb 27, 2014 at 16:43:05</label><div class="tooltip-kpi-title-s2"><label class="label-tooltip-kpi-qs-data" style="color:' + ToolTipContent(testdata, key, x, y) + '">' + y + ' on' + x + '</label><label class="label-tooltip-kpi-title-s2">for </label>' + "   " + '<label class="label-tooltip-kpi-data-s1">' + key + '</label><br></div></div>'
        });
        chart.showLegend(false);
        d3.select('#' + ChartID)
            .datum(testdata)
            .transition().duration(500)
            .call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
    });
}
/**************************************
 * Simple test data generator
 */

testData = function () {
    return stream_layers(3, 128, .1).map(function (data, i) {
        return {
            key: 'Stream' + i,
            values: data
        };
    });
}
function ToolTipContent(data, key, x, y) {
    var color = "";
    var _temp = [];
    $.each(data, function (index, item) {
        if (item.key == key) {
            color = item.color;
        }

    });

    return color;
}


function Get_ComulativeLineChart(ChartID) {
    var data = [
    {
        "key": "Series 1",
        "values": [[1025409600000, 0], [1028088000000, -6.3382185140371], [1030766400000, -5.9507873460847], [1033358400000, -11.569146943813], [1036040400000, -5.4767332317425], [1038632400000, 0.50794682203014], [1041310800000, -5.5310285460542], [1043989200000, -5.7838296963382], [1046408400000, -7.3249341615649], [1049086800000, -6.7078630712489], [1051675200000, 0.44227126150934], [1054353600000, 7.2481659343222], [1056945600000, 9.2512381306992], [1059624000000, 11.341210982529], [1062302400000, 14.734820409020], [1064894400000, 12.387148007542], [1067576400000, 18.436471461827], [1070168400000, 19.830742266977], [1072846800000, 22.643205829887], [1075525200000, 26.743156781239], [1078030800000, 29.597478802228], [1080709200000, 30.831697585341], [1083297600000, 28.054068024708], [1085976000000, 29.294079423832], [1088568000000, 30.269264061274], [1091246400000, 24.934526898906], [1093924800000, 24.265982759406], [1096516800000, 27.217794897473], [1099195200000, 30.802601992077], [1101790800000, 36.331003758254], [1104469200000, 43.142498700060], [1107147600000, 40.558263931958], [1109566800000, 42.543622385800], [1112245200000, 41.683584710331], [1114833600000, 36.375367302328], [1117512000000, 40.719688980730], [1120104000000, 43.897963036919], [1122782400000, 49.797033975368], [1125460800000, 47.085993935989], [1128052800000, 46.601972859745], [1130734800000, 41.567784572762], [1133326800000, 47.296923737245], [1136005200000, 47.642969612080], [1138683600000, 50.781515820954], [1141102800000, 52.600229204305], [1143781200000, 55.599684490628], [1146369600000, 57.920388436633], [1149048000000, 53.503593218971], [1151640000000, 53.522973979964], [1154318400000, 49.846822298548], [1156996800000, 54.721341614650], [1159588800000, 58.186236223191], [1162270800000, 63.908065540997], [1164862800000, 69.767285129367], [1167541200000, 72.534013373592], [1170219600000, 77.991819436573], [1172638800000, 78.143584404990], [1175313600000, 83.702398665233], [1177905600000, 91.140859312418], [1180584000000, 98.590960607028], [1183176000000, 96.245634754228], [1185854400000, 92.326364432615], [1188532800000, 97.068765332230], [1191124800000, 105.81025556260], [1193803200000, 114.38348777791], [1196398800000, 103.59604949810], [1199077200000, 101.72488429307], [1201755600000, 89.840147735028], [1204261200000, 86.963597532664], [1206936000000, 84.075505208491], [1209528000000, 93.170105645831], [1212206400000, 103.62838083121], [1214798400000, 87.458241365091], [1217476800000, 85.808374141319], [1220155200000, 93.158054469193], [1222747200000, 65.973252382360], [1225425600000, 44.580686638224], [1228021200000, 36.418977140128], [1230699600000, 38.727678144761], [1233378000000, 36.692674173387], [1235797200000, 30.033022809480], [1238472000000, 36.707532162718], [1241064000000, 52.191457688389], [1243742400000, 56.357883979735], [1246334400000, 57.629002180305], [1249012800000, 66.650985790166], [1251691200000, 70.839243432186], [1254283200000, 78.731998491499], [1256961600000, 72.375528540349], [1259557200000, 81.738387881630], [1262235600000, 87.539792394232], [1264914000000, 84.320762662273], [1267333200000, 90.621278391889], [1270008000000, 102.47144881651], [1272600000000, 102.79320353429], [1275278400000, 90.529736050479], [1277870400000, 76.580859994531], [1280548800000, 86.548979376972], [1283227200000, 81.879653334089], [1285819200000, 101.72550015956], [1288497600000, 107.97964852260], [1291093200000, 106.16240630785], [1293771600000, 114.84268599533], [1296450000000, 121.60793322282], [1298869200000, 133.41437346605], [1301544000000, 125.46646042904], [1304136000000, 129.76784954301], [1306814400000, 128.15798861044], [1309406400000, 121.92388706072], [1312084800000, 116.70036100870], [1314763200000, 88.367701837033], [1317355200000, 59.159665765725], [1320033600000, 79.793568139753], [1322629200000, 75.903834028417], [1325307600000, 72.704218209157], [1327986000000, 84.936990804097], [1330491600000, 93.388148670744]]
    },
    {
        "key": "Series 2",
        "values": [[1025409600000, 0], [1028088000000, 0], [1030766400000, 0], [1033358400000, 0], [1036040400000, 0], [1038632400000, 0], [1041310800000, 0], [1043989200000, 0], [1046408400000, 0], [1049086800000, 0], [1051675200000, 0], [1054353600000, 0], [1056945600000, 0], [1059624000000, 0], [1062302400000, 0], [1064894400000, 0], [1067576400000, 0], [1070168400000, 0], [1072846800000, 0], [1075525200000, -0.049184266875945], [1078030800000, -0.10757569491991], [1080709200000, -0.075601531307242], [1083297600000, -0.061245277988149], [1085976000000, -0.068227316401169], [1088568000000, -0.11242758058502], [1091246400000, -0.074848439408270], [1093924800000, -0.11465623676497], [1096516800000, -0.24370633342416], [1099195200000, -0.21523268478893], [1101790800000, -0.37859370911822], [1104469200000, -0.41932884345151], [1107147600000, -0.45393735984802], [1109566800000, -0.50868179522598], [1112245200000, -0.48164396881207], [1114833600000, -0.41605962887194], [1117512000000, -0.48490348490240], [1120104000000, -0.55071036101311], [1122782400000, -0.67489170505394], [1125460800000, -0.74978070939342], [1128052800000, -0.86395050745343], [1130734800000, -0.78524898506764], [1133326800000, -0.99800440950854], [1136005200000, -1.1177951153878], [1138683600000, -1.4119975432964], [1141102800000, -1.2409959736465], [1143781200000, -1.3088936375431], [1146369600000, -1.5495785469683], [1149048000000, -1.1563414981293], [1151640000000, -0.87192471725994], [1154318400000, -0.84073995183442], [1156996800000, -0.88761892867370], [1159588800000, -0.81748513917485], [1162270800000, -1.2874081041274], [1164862800000, -1.9234702981339], [1167541200000, -1.8377768147648], [1170219600000, -2.7107654031830], [1172638800000, -2.6493268125418], [1175313600000, -3.0814553134551], [1177905600000, -3.8509837783574], [1180584000000, -5.2919167850718], [1183176000000, -5.2297750650773], [1185854400000, -3.9335668501451], [1188532800000, -2.3695525190114], [1191124800000, -2.3084243151854], [1193803200000, -3.0753680726738], [1196398800000, -2.2346609938962], [1199077200000, -3.0598810361615], [1201755600000, -1.8410154270386], [1204261200000, -1.6479442038620], [1206936000000, -1.9293858622780], [1209528000000, -3.0769590460943], [1212206400000, -4.2423933501421], [1214798400000, -2.6951491617768], [1217476800000, -2.8981825939957], [1220155200000, -2.9662727940324], [1222747200000, 0.21556750497498], [1225425600000, 2.6784995167088], [1228021200000, 4.1296711248958], [1230699600000, 3.7311068218734], [1233378000000, 4.7695330866954], [1235797200000, 5.1919133040990], [1238472000000, 4.1025856045660], [1241064000000, 2.8498939666225], [1243742400000, 2.8106017222851], [1246334400000, 2.8456526669963], [1249012800000, 0.65563070754298], [1251691200000, -0.30022343874633], [1254283200000, -1.1600358228964], [1256961600000, -0.26674408835052], [1259557200000, -1.4693389757812], [1262235600000, -2.7855421590594], [1264914000000, -1.2668244065703], [1267333200000, -2.5537804115548], [1270008000000, -4.9144552474502], [1272600000000, -6.0484408234831], [1275278400000, -3.3834349033750], [1277870400000, -0.46752826932523], [1280548800000, -1.8030186027963], [1283227200000, -0.99623230097881], [1285819200000, -3.3475370235594], [1288497600000, -3.8187026520342], [1291093200000, -4.2354146250353], [1293771600000, -5.6795404292885], [1296450000000, -6.2928665328172], [1298869200000, -6.8549277434419], [1301544000000, -6.9925308360918], [1304136000000, -8.3216548655839], [1306814400000, -7.7682867271435], [1309406400000, -6.9244213301058], [1312084800000, -5.7407624451404], [1314763200000, -2.1813149077927], [1317355200000, 2.9407596325999], [1320033600000, -1.1130607112134], [1322629200000, -2.0274822307752], [1325307600000, -1.8372559072154], [1327986000000, -4.0732815531148], [1330491600000, -6.4417038470291]]
    },
    {
        "key": "Series 3",
        "values": [[1025409600000, 0], [1028088000000, -6.3382185140371], [1030766400000, -5.9507873460847], [1033358400000, -11.569146943813], [1036040400000, -5.4767332317425], [1038632400000, 0.50794682203014], [1041310800000, -5.5310285460542], [1043989200000, -5.7838296963382], [1046408400000, -7.3249341615649], [1049086800000, -6.7078630712489], [1051675200000, 0.44227126150934], [1054353600000, 7.2481659343222], [1056945600000, 9.2512381306992], [1059624000000, 11.341210982529], [1062302400000, 14.734820409020], [1064894400000, 12.387148007542], [1067576400000, 18.436471461827], [1070168400000, 19.830742266977], [1072846800000, 22.643205829887], [1075525200000, 26.693972514363], [1078030800000, 29.489903107308], [1080709200000, 30.756096054034], [1083297600000, 27.992822746720], [1085976000000, 29.225852107431], [1088568000000, 30.156836480689], [1091246400000, 24.859678459498], [1093924800000, 24.151326522641], [1096516800000, 26.974088564049], [1099195200000, 30.587369307288], [1101790800000, 35.952410049136], [1104469200000, 42.723169856608], [1107147600000, 40.104326572110], [1109566800000, 42.034940590574], [1112245200000, 41.201940741519], [1114833600000, 35.959307673456], [1117512000000, 40.234785495828], [1120104000000, 43.347252675906], [1122782400000, 49.122142270314], [1125460800000, 46.336213226596], [1128052800000, 45.738022352292], [1130734800000, 40.782535587694], [1133326800000, 46.298919327736], [1136005200000, 46.525174496692], [1138683600000, 49.369518277658], [1141102800000, 51.359233230659], [1143781200000, 54.290790853085], [1146369600000, 56.370809889665], [1149048000000, 52.347251720842], [1151640000000, 52.651049262704], [1154318400000, 49.006082346714], [1156996800000, 53.833722685976], [1159588800000, 57.368751084016], [1162270800000, 62.620657436870], [1164862800000, 67.843814831233], [1167541200000, 70.696236558827], [1170219600000, 75.281054033390], [1172638800000, 75.494257592448], [1175313600000, 80.620943351778], [1177905600000, 87.289875534061], [1180584000000, 93.299043821956], [1183176000000, 91.015859689151], [1185854400000, 88.392797582470], [1188532800000, 94.699212813219], [1191124800000, 103.50183124741], [1193803200000, 111.30811970524], [1196398800000, 101.36138850420], [1199077200000, 98.665003256909], [1201755600000, 87.999132307989], [1204261200000, 85.315653328802], [1206936000000, 82.146119346213], [1209528000000, 90.093146599737], [1212206400000, 99.385987481068], [1214798400000, 84.763092203314], [1217476800000, 82.910191547323], [1220155200000, 90.191781675161], [1222747200000, 66.188819887335], [1225425600000, 47.259186154933], [1228021200000, 40.548648265024], [1230699600000, 42.458784966634], [1233378000000, 41.462207260082], [1235797200000, 35.224936113579], [1238472000000, 40.810117767284], [1241064000000, 55.041351655012], [1243742400000, 59.168485702020], [1246334400000, 60.474654847301], [1249012800000, 67.306616497709], [1251691200000, 70.539019993440], [1254283200000, 77.571962668603], [1256961600000, 72.108784451998], [1259557200000, 80.269048905849], [1262235600000, 84.754250235173], [1264914000000, 83.053938255703], [1267333200000, 88.067497980334], [1270008000000, 97.556993569060], [1272600000000, 96.744762710807], [1275278400000, 87.146301147104], [1277870400000, 76.113331725206], [1280548800000, 84.745960774176], [1283227200000, 80.883421033110], [1285819200000, 98.377963136001], [1288497600000, 104.16094587057], [1291093200000, 101.92699168281], [1293771600000, 109.16314556604], [1296450000000, 115.31506669000], [1298869200000, 126.55944572261], [1301544000000, 118.47392959295], [1304136000000, 121.44619467743], [1306814400000, 120.38970188330], [1309406400000, 114.99946573061], [1312084800000, 110.95959856356], [1314763200000, 86.186386929240], [1317355200000, 62.100425398325], [1320033600000, 78.680507428540], [1322629200000, 73.876351797642], [1325307600000, 70.866962301942], [1327986000000, 80.863709250982], [1330491600000, 86.946444823715]]
    },
    {
        "key": "Series 4",
        "values": [[1025409600000, -7.0674410638835], [1028088000000, -14.663359292964], [1030766400000, -14.104393060540], [1033358400000, -23.114477037218], [1036040400000, -16.774256687841], [1038632400000, -11.902028464000], [1041310800000, -16.883038668422], [1043989200000, -19.104223676831], [1046408400000, -20.420523282736], [1049086800000, -19.660555051587], [1051675200000, -13.106911231646], [1054353600000, -8.2448460302143], [1056945600000, -7.0313058730976], [1059624000000, -5.1485118700389], [1062302400000, -3.0011028761469], [1064894400000, -4.1367265281467], [1067576400000, 1.5425209565025], [1070168400000, 2.7673533607299], [1072846800000, 7.7077114755360], [1075525200000, 9.7565015112434], [1078030800000, 11.396888609473], [1080709200000, 10.013964745578], [1083297600000, 8.0558890950562], [1085976000000, 9.6081966657458], [1088568000000, 11.918590426432], [1091246400000, 7.9945345523982], [1093924800000, 8.3201276776796], [1096516800000, 9.8283954846342], [1099195200000, 11.527125859650], [1101790800000, 16.413657596527], [1104469200000, 20.393798297928], [1107147600000, 17.456308413907], [1109566800000, 20.087778400999], [1112245200000, 17.988336990817], [1114833600000, 15.378490151331], [1117512000000, 19.474322935730], [1120104000000, 20.013851070354], [1122782400000, 24.749943726975], [1125460800000, 23.558710274826], [1128052800000, 24.558915040889], [1130734800000, 22.355860488034], [1133326800000, 27.138026265756], [1136005200000, 27.202220808591], [1138683600000, 31.219437344964], [1141102800000, 31.392355525125], [1143781200000, 33.373099232542], [1146369600000, 35.095277582309], [1149048000000, 30.923356507615], [1151640000000, 31.083717332561], [1154318400000, 31.290690671561], [1156996800000, 34.247769216679], [1159588800000, 37.411073177620], [1162270800000, 42.079177096411], [1164862800000, 44.978191659648], [1167541200000, 46.713271025310], [1170219600000, 49.203892437699], [1172638800000, 46.684723471826], [1175313600000, 48.385458973500], [1177905600000, 54.660197840305], [1180584000000, 60.311838415602], [1183176000000, 57.583282204682], [1185854400000, 52.425398898751], [1188532800000, 54.663538086985], [1191124800000, 60.181844325224], [1193803200000, 62.877219773621], [1196398800000, 55.760611512951], [1199077200000, 54.735280367784], [1201755600000, 45.495912959474], [1204261200000, 40.934919015876], [1206936000000, 40.303777633187], [1209528000000, 47.403740368773], [1212206400000, 49.951960898839], [1214798400000, 37.534590035098], [1217476800000, 36.405758293321], [1220155200000, 38.545373001858], [1222747200000, 26.106358664455], [1225425600000, 4.2658006768744], [1228021200000, -3.5517839867557], [1230699600000, -2.0878920761513], [1233378000000, -10.408879093829], [1235797200000, -19.924242196038], [1238472000000, -12.906491912782], [1241064000000, -3.9774866468346], [1243742400000, 1.0319171601402], [1246334400000, 1.3109350357718], [1249012800000, 9.1668309061935], [1251691200000, 13.121178985954], [1254283200000, 17.578680237511], [1256961600000, 14.971294355085], [1259557200000, 21.551327027338], [1262235600000, 24.592328423819], [1264914000000, 20.158087829555], [1267333200000, 24.135661929185], [1270008000000, 31.815205405903], [1272600000000, 34.389524768466], [1275278400000, 23.785555857522], [1277870400000, 17.082756649072], [1280548800000, 25.248007727100], [1283227200000, 19.415179069165], [1285819200000, 30.413636349327], [1288497600000, 35.357952964550], [1291093200000, 35.886413535859], [1293771600000, 45.003601951959], [1296450000000, 48.274893564020], [1298869200000, 53.562864914648], [1301544000000, 54.108274337412], [1304136000000, 58.618190111927], [1306814400000, 56.806793965598], [1309406400000, 54.135477252994], [1312084800000, 50.735258942442], [1314763200000, 42.208170945813], [1317355200000, 31.617916826724], [1320033600000, 46.492005006737], [1322629200000, 46.203116922145], [1325307600000, 47.541427643137], [1327986000000, 54.518998440993], [1330491600000, 61.099720234693]]
    }
    ];
    nv.addGraph(function () {
        var chart = nv.models.cumulativeLineChart()
                      .x(function (d) { return d[0] })
                      .y(function (d) { return d[1] / 100 }) //adjusting, 100% is 1.00, not 100 as it is in the data
                      .color(d3.scale.category10().range())
                      .useInteractiveGuideline(true)
        ;

        chart.xAxis
           .tickValues([1078030800000, 1122782400000, 1167541200000, 1251691200000])
           .tickFormat(function (d) {
               return d3.time.format('%x')(new Date(d))
           });

        chart.yAxis
            .tickFormat(d3.format(',.1%'));
        chart.showLegend(false);
        d3.select('#' + ChartID)
            .datum(data)
            .call(chart);

        //TODO: Figure out a good way to do this automatically
        nv.utils.windowResize(chart.update);

        return chart;
    });
}
//DottedLine

function Get_DottedLineChart(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
//        .width(1300)
//        .height(300)
//                .margin({ left: 100 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis               
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Time (ms)')
      .tickFormat(d3.format(',r'));

        chart.yAxis     //Chart y-axis settings
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format('.02f'));

        /* Done setting the chart up? Time to render it!*/
        var myData = sinAndCos();   //You need data...
        chart.tooltipContent(function (key, x, y, e, graph) {
            return '<div class="tooltip-tile-s2"><label class="label-tooltip-kpi-title-s2">Thursday Feb 27, 2014 at 16:43:05</label><div class="tooltip-kpi-title-s2"><label class="label-tooltip-kpi-qs-data" style="color:' + ToolTipContent(myData, key, x, y) + '">' + y + ' on' + x + '</label><label class="label-tooltip-kpi-title-s2">for </label>' + "   " + '<label class="label-tooltip-kpi-data-s1">' + key + '</label><br></div></div>'
        });

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });
    /**************************************
    * Simple test data generator
    */
    function sinAndCos() {
        var sin = [], sin2 = [],
      cos = [];

        //Data is represented as an array of {x,y} pairs.
        for (var i = 0; i < 100; i++) {
            sin.push({ x: i, y: Math.sin(i / 10) });
            sin2.push({ x: i, y: Math.sin(i / 10) * 0.25 + 0.5 });
            cos.push({ x: i, y: .5 * Math.cos(i / 10) });
        }

        //Line chart data should be sent as an array of series objects.
        return [
    {
        values: sin,      //values - represents the array of {x,y} data points
        key: 'Sine Wave', //key  - the name of the series.
        color: '#ff7f0e'  //color - optional: choose your own line color.
    },
    {
        values: cos,
        key: 'Cosine Wave',
        color: '#2ca02c',

    },
    {
        values: sin2,
        key: 'Another sine wave',
        color: '#7777ff',
        area: true      //area - set to true if you want this line to turn into a filled area chart.
    }
        ];
    }
}
function ToolTipContent(data, key, x, y) {
    var color = "";
    var _temp = [];
    $.each(data, function (index, item) {
        if (item.key == key) {
            color = item.color;
        }

    });

    return color;
}

function Get_LineChartType_Period(ChartID) {

    nv.addGraph(function () {
        var chart = nv.models.lineChart()
         .interpolate("monotone")
       // .width(1300)
        .height(250)

                .margin({ left: 80, right: 50 })  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                .transitionDuration(350)  //how fast do you want the lines to transition?
                .showLegend(false)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)
                 .tooltipContent(function (key, x, y, e, graph) {
                     return '<center><b><h3>' + y + "on" + x + '<center></center>'
                 })
                     //Show the y-axis
                .showXAxis(true)        //Show the x-axis
        ;

        chart.xAxis     //Chart x-axis settings
      .axisLabel('Manager')
      .tickFormat(function (d, i) {
          // alert(d+"  "+i);
          // var now = (new Date()).getTime(); // -86400 * 1000 * 365;
          // now = new Date(now); // + d * 86400 * 1000);

          return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15][d];
      });

        chart.yAxis.axisLabel("Average Completion").width(60)     //Chart y-axis settings
        .tickFormat(function (f) { return f + "%"; });

        /* Done setting the chart up? Time to render it!*/
        // var myData = sinAndCos();   //You need data...

        var myData = [
     {
         "key": "MQL",
         "color": "#5FBA50",
         "values": [{
             "x": 0,
             "y": 10
         }, {
             "x": 1,
             "y": 20
         }, {
             "x": 2,
             "y": 50
         }, {
             "x": 3,
             "y": 100
         }, {
             "x": 4,
             "y": 125
         }, {
             "x": 5,
             "y": 128
         }, {
             "x": 6,
             "y": 142
         }, {
             "x": 7,
             "y": 145
         }, {
             "x": 8,
             "y": 150
         }, {
             "x": 9,
             "y": 152
         }, {
             "x": 10,
             "y": 156
         }
         , {
             "x": 11,
             "y": 160
         }

         ]

     }

        ];


        chart.forceY([0, 10]);
        // chart.yDomain2([-100, 100]);

        d3.select('#' + ChartID)    //Select the <svg> element you want to render the chart in.   
      .datum(myData)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
    });

}
